/* LOCATION TAG LIST 

	Function:
        List locations that need specific workflows depending of the BG type (can't be guessed from their type only)
        For example: certain locations need colour-grading after render.
    
    Context:
        used in "TaggerTool.jsx" during the creation of new background asset.
        
    Format:
        'Location':{
                            'Sub-location': workflow index,
                            'Sub-location': workflow index,
                            'Sub-location': workflow index,
                            },
        
        Location: The name of the main location, e.g. "School".
        Sub-location: The name of Sub-location, e.g. "Canteen" or "PrincipalsOffice".
        Workflow Index: The desired task template according to the BG type.
    
    Dependencies:
        task templates are defined in the "task_templates_list", according to BG types

*/	
/*
	PLEASE MAKE CHANGES TO THIS LIST CAUTIOUSLY :
	ANY CHANGE WILL AFFECT ALL USERS !
	
	! IT IS SAFER TO MAKE A COPY OF THIS FILE BEFORE EDITING !
*/

var location_tags_json_file = File(File($.fileName).parent.fsName + "/location_tags.json");

location_tags_json_file.open("r");
eval(location_tags_json_file.read());
location_tags_json_file.close();
			
function trim(str)
{
	return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
			
function parse_location_tag(full_tag)
{
	// parse the tag
	var category = "";
	var tag = trim(full_tag);
	var m = /^(.*)_(.*)$/.exec(full_tag);
	if (m)
	{
		category = trim(m[1]);
		tag = trim(m[2]);
	}
	if (!category || /^Others$/i.test(category))
	{
		category = "Others";
		full_tag = "_" + tag;
	}
	else
		full_tag = category + "_" + tag;
	return {
		category: category,
		tag: tag,
		full_tag: full_tag,
	}
}
			
function add_location_tag(full_tag)
{
	var parsed_tag = parse_location_tag(full_tag);
	
	// add this tag
	if (!(parsed_tag.category in locations))
		locations[parsed_tag.category] = {};
	locations[parsed_tag.category][parsed_tag.tag] = 3;
	
	// create temp file
	var temp_file_path = location_tags_json_file.fsName + ".temp";
	var f = new File(temp_file_path);
	f.open("w");
	f.writeln("// AUTOGENERATED");

	// task_templates_list
	f.writeln("var task_templates_list = {");
	for (var k in task_templates_list)
	{
		f.writeln("\t\"" + k + "\" :{");
		for (var kk in task_templates_list[k])
		{
			f.writeln("\t\t\"" + kk + "\": \"" + task_templates_list[k][kk] + "\",");
		}
		f.writeln("\t},");
	}
	f.writeln("};");
	
	// locations
	f.writeln("var locations = {");
	for (var k in locations)
	{
		f.writeln("\t\"" + k + "\" :{");
		if (k == "Others")
			f.writeln("\t\t// tags will be : _tag");
		else
			f.writeln("\t\t// tags will be : " + k + "_tag");
		for (var kk in locations[k])
		{
			f.writeln("\t\t\"" + kk + "\": " + locations[k][kk] + ",");
		}
		f.writeln("\t},");
	}
	f.writeln("};");

	// close and move temp file
	f.close();
	system.callSystem("cmd /c del \"" + location_tags_json_file.fsName + "\"");
	system.callSystem("cmd /c move \"" + f.fsName + "\" \"" + location_tags_json_file.fsName + "\"");
	
	// return the treated tag
	return parsed_tag;
}
